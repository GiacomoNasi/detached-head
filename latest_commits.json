[
    {
        "repo": "clipboard_shortcut",
        "date": "2024-07-19T15:22:59Z",
        "msg": "Merge remote-tracking branch 'origin/master'",
        "sha": "42abe1f34dd81330e7c327bebad164bd00550a62",
        "files": []
    },
    {
        "repo": "expressBookReviews",
        "date": "2023-05-26T15:20:20Z",
        "msg": "Ready for evaluation",
        "sha": "0051c9e2d03bc281803fbbd541ecf3de3976d293",
        "files": [
            {
                "filename_after": "final_project/index.js",
                "filename_before": "final_project/index.js",
                "status": "modified",
                "content_changes": []
            },
            {
                "filename_after": "final_project/package-lock.json",
                "filename_before": "final_project/package-lock.json",
                "status": "added",
                "content_changes": []
            },
            {
                "filename_after": "final_project/router/auth_users.js",
                "filename_before": "final_project/router/auth_users.js",
                "status": "modified",
                "content_changes": []
            },
            {
                "filename_after": "final_project/router/general.js",
                "filename_before": "final_project/router/general.js",
                "status": "modified",
                "content_changes": []
            }
        ]
    },
    {
        "repo": "expressBookReviews_1",
        "date": "2023-05-26T15:20:20Z",
        "msg": "Ready for evaluation",
        "sha": "0051c9e2d03bc281803fbbd541ecf3de3976d293",
        "files": [
            {
                "filename_after": "final_project/index.js",
                "filename_before": "final_project/index.js",
                "status": "modified",
                "content_changes": [
                    {
                        "value": "@ -10,11 +10,25 @@ app.use(express.json());",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "app.use(\"/customer\",session({secret:\"fingerprint_customer\",resave: true, saveUninitialized: true}))",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "",
                        "change_type": "added"
                    },
                    {
                        "value": "app.use(\"/customer/auth/*\", function auth(req,res,next){",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "//Write the authenication mechanism here",
                        "change_type": "removed"
                    },
                    {
                        "value": "    if(req.session.authorization) { //get the authorization object stored in the session",
                        "change_type": "added"
                    },
                    {
                        "value": "        token = req.session.authorization['accessToken']; //retrieve the token from authorization object",
                        "change_type": "added"
                    },
                    {
                        "value": "        jwt.verify(token, \"access\",(err,user)=>{ //Use JWT to verify token",
                        "change_type": "added"
                    },
                    {
                        "value": "            if(!err){",
                        "change_type": "added"
                    },
                    {
                        "value": "                req.user = user;",
                        "change_type": "added"
                    },
                    {
                        "value": "                next();",
                        "change_type": "added"
                    },
                    {
                        "value": "            }",
                        "change_type": "added"
                    },
                    {
                        "value": "            else{",
                        "change_type": "added"
                    },
                    {
                        "value": "                return res.status(403).json({message: \"User not authenticated\"})",
                        "change_type": "added"
                    },
                    {
                        "value": "            }",
                        "change_type": "added"
                    },
                    {
                        "value": "         });",
                        "change_type": "added"
                    },
                    {
                        "value": "     } else {",
                        "change_type": "added"
                    },
                    {
                        "value": "        return res.status(403).json({message: \"User not logged in\"})",
                        "change_type": "added"
                    },
                    {
                        "value": "     }",
                        "change_type": "added"
                    },
                    {
                        "value": "});",
                        "change_type": "unchanged"
                    },
                    {
                        "value": " ",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "const PORT =5000;",
                        "change_type": "removed"
                    },
                    {
                        "value": "const PORT = 5000;",
                        "change_type": "added"
                    },
                    {
                        "value": "",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "app.use(\"/customer\", customer_routes);",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "app.use(\"/\", genl_routes);",
                        "change_type": "unchanged"
                    }
                ]
            },
            {
                "filename_after": "final_project/package-lock.json",
                "filename_before": "final_project/package-lock.json",
                "status": "added",
                "content_changes": []
            },
            {
                "filename_after": "final_project/router/auth_users.js",
                "filename_before": "final_project/router/auth_users.js",
                "status": "modified",
                "content_changes": [
                    {
                        "value": "@ -9,20 +9,52 @@ const isValid = (username)=>{ //returns boolean",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "//write code to check is the username is valid",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "}",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "const authenticatedUser = (username,password)=>{ //returns boolean",
                        "change_type": "removed"
                    },
                    {
                        "value": "//write code to check if username and password match the one we have in records.",
                        "change_type": "removed"
                    },
                    {
                        "value": "}",
                        "change_type": "removed"
                    },
                    {
                        "value": "const authenticatedUser = (username,password)=>{",
                        "change_type": "added"
                    },
                    {
                        "value": "        let validusers = users.filter((user)=>{",
                        "change_type": "added"
                    },
                    {
                        "value": "            return (user.username === username && user.password === password)",
                        "change_type": "added"
                    },
                    {
                        "value": "        });",
                        "change_type": "added"
                    },
                    {
                        "value": "        if(validusers.length > 0){",
                        "change_type": "added"
                    },
                    {
                        "value": "            return true;",
                        "change_type": "added"
                    },
                    {
                        "value": "        } else {",
                        "change_type": "added"
                    },
                    {
                        "value": "            return false;",
                        "change_type": "added"
                    },
                    {
                        "value": "        }",
                        "change_type": "added"
                    },
                    {
                        "value": "    }",
                        "change_type": "added"
                    },
                    {
                        "value": "",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "//only registered users can login",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "regd_users.post(\"/login\", (req,res) => {",
                        "change_type": "removed"
                    },
                    {
                        "value": "  //Write your code here",
                        "change_type": "removed"
                    },
                    {
                        "value": "  return res.status(300).json({message: \"Yet to be implemented\"});",
                        "change_type": "removed"
                    },
                    {
                        "value": "regd_users.post(\"/login\", (req,res) => { ",
                        "change_type": "added"
                    },
                    {
                        "value": "    const username = req.query.username;",
                        "change_type": "added"
                    },
                    {
                        "value": "    const password = req.query.password;",
                        "change_type": "added"
                    },
                    {
                        "value": "    if (!username || !password) {",
                        "change_type": "added"
                    },
                    {
                        "value": "        return res.status(404).json({message: \"Error logging in\"});",
                        "change_type": "added"
                    },
                    {
                        "value": "    }",
                        "change_type": "added"
                    },
                    {
                        "value": "    if (authenticatedUser(username,password)) {",
                        "change_type": "added"
                    },
                    {
                        "value": "        let accessToken = jwt.sign(",
                        "change_type": "added"
                    },
                    {
                        "value": "            { data: password }, ",
                        "change_type": "added"
                    },
                    {
                        "value": "            'access', ",
                        "change_type": "added"
                    },
                    {
                        "value": "            { expiresIn: 60 * 60 });",
                        "change_type": "added"
                    },
                    {
                        "value": "",
                        "change_type": "added"
                    },
                    {
                        "value": "        req.session.authorization = {",
                        "change_type": "added"
                    },
                    {
                        "value": "            accessToken,username",
                        "change_type": "added"
                    },
                    {
                        "value": "    }",
                        "change_type": "added"
                    },
                    {
                        "value": "    return res.status(200).send(\"User successfully logged in\");",
                        "change_type": "added"
                    },
                    {
                        "value": "    } else {",
                        "change_type": "added"
                    },
                    {
                        "value": "        return res.status(208).json({message: \"Invalid Login. Check username and password\"});",
                        "change_type": "added"
                    },
                    {
                        "value": "    }",
                        "change_type": "added"
                    },
                    {
                        "value": "    ",
                        "change_type": "added"
                    },
                    {
                        "value": "});",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "// Add a book review",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "regd_users.put(\"/auth/review/:isbn\", (req, res) => {",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "  //Write your code here",
                        "change_type": "removed"
                    },
                    {
                        "value": "  return res.status(300).json({message: \"Yet to be implemented\"});",
                        "change_type": "removed"
                    },
                    {
                        "value": "  ",
                        "change_type": "added"
                    },
                    {
                        "value": "    let {_, username} = req.session.authorization    ",
                        "change_type": "added"
                    },
                    {
                        "value": "    books[req.params.isbn].reviews[username] = req.body.content",
                        "change_type": "added"
                    },
                    {
                        "value": "    return res.status(200).json(books[req.params.isbn].reviews);",
                        "change_type": "added"
                    },
                    {
                        "value": "});",
                        "change_type": "added"
                    },
                    {
                        "value": "",
                        "change_type": "added"
                    },
                    {
                        "value": "regd_users.delete(\"/auth/review/:isbn\", (req, res) => {",
                        "change_type": "added"
                    },
                    {
                        "value": "    let {_, username} = req.session.authorization",
                        "change_type": "added"
                    },
                    {
                        "value": "    delete books[req.params.isbn].reviews[username]",
                        "change_type": "added"
                    },
                    {
                        "value": "    return res.status(200).json(books[req.params.isbn].reviews);",
                        "change_type": "added"
                    },
                    {
                        "value": "});",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "module.exports.authenticated = regd_users;",
                        "change_type": "unchanged"
                    }
                ]
            },
            {
                "filename_after": "final_project/router/general.js",
                "filename_before": "final_project/router/general.js",
                "status": "modified",
                "content_changes": [
                    {
                        "value": "@ -4,40 +4,83 @@ let isValid = require(\"./auth_users.js\").isValid;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "let users = require(\"./auth_users.js\").users;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "const public_users = express.Router();",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "const doesExist = (username)=>{",
                        "change_type": "added"
                    },
                    {
                        "value": "        let userswithsamename = users.filter((user)=>{",
                        "change_type": "added"
                    },
                    {
                        "value": "            return user.username === username",
                        "change_type": "added"
                    },
                    {
                        "value": "        });",
                        "change_type": "added"
                    },
                    {
                        "value": "        if(userswithsamename.length > 0){",
                        "change_type": "added"
                    },
                    {
                        "value": "            return true;",
                        "change_type": "added"
                    },
                    {
                        "value": "        } else {",
                        "change_type": "added"
                    },
                    {
                        "value": "            return false;",
                        "change_type": "added"
                    },
                    {
                        "value": "        }",
                        "change_type": "added"
                    },
                    {
                        "value": "    }",
                        "change_type": "added"
                    },
                    {
                        "value": "    ",
                        "change_type": "added"
                    },
                    {
                        "value": "",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "public_users.post(\"/register\", (req,res) => {",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "  //Write your code here",
                        "change_type": "removed"
                    },
                    {
                        "value": "  return res.status(300).json({message: \"Yet to be implemented\"});",
                        "change_type": "removed"
                    },
                    {
                        "value": "    const username = req.body.username;",
                        "change_type": "added"
                    },
                    {
                        "value": "    const password = req.body.password;",
                        "change_type": "added"
                    },
                    {
                        "value": "    if (username && password) {",
                        "change_type": "added"
                    },
                    {
                        "value": "        if (!doesExist(username)) { ",
                        "change_type": "added"
                    },
                    {
                        "value": "            users.push({\"username\":username,\"password\":password});",
                        "change_type": "added"
                    },
                    {
                        "value": "            return res.status(200).json({message: \"User successfully registred. Now you can login\"});",
                        "change_type": "added"
                    },
                    {
                        "value": "        } else {",
                        "change_type": "added"
                    },
                    {
                        "value": "            return res.status(409).json({message: \"User already exists!\"});",
                        "change_type": "added"
                    },
                    {
                        "value": "        }",
                        "change_type": "added"
                    },
                    {
                        "value": "    } ",
                        "change_type": "added"
                    },
                    {
                        "value": "    return res.status(400).json({message: \"Unable to register user.\"});",
                        "change_type": "added"
                    },
                    {
                        "value": "});",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "// Get the book list available in the shop",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "public_users.get('/',function (req, res) {",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "  //Write your code here",
                        "change_type": "removed"
                    },
                    {
                        "value": "  return res.status(300).json({message: \"Yet to be implemented\"});",
                        "change_type": "removed"
                    },
                    {
                        "value": "    ",
                        "change_type": "added"
                    },
                    {
                        "value": "    let myPromise = new Promise((resolve,reject) => {",
                        "change_type": "added"
                    },
                    {
                        "value": "        setTimeout(() => {",
                        "change_type": "added"
                    },
                    {
                        "value": "          resolve(books)",
                        "change_type": "added"
                    },
                    {
                        "value": "        },500)})",
                        "change_type": "added"
                    },
                    {
                        "value": "",
                        "change_type": "added"
                    },
                    {
                        "value": "    myPromise.then(books =>  res.status(200).json(books))",
                        "change_type": "added"
                    },
                    {
                        "value": "});",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "// Get book details based on ISBN",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "public_users.get('/isbn/:isbn',function (req, res) {",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "  //Write your code here",
                        "change_type": "removed"
                    },
                    {
                        "value": "  return res.status(300).json({message: \"Yet to be implemented\"});",
                        "change_type": "removed"
                    },
                    {
                        "value": "",
                        "change_type": "added"
                    },
                    {
                        "value": "    let myPromise = new Promise((resolve,reject) => {",
                        "change_type": "added"
                    },
                    {
                        "value": "        setTimeout(() => {",
                        "change_type": "added"
                    },
                    {
                        "value": "          resolve(books[req.params.isbn])",
                        "change_type": "added"
                    },
                    {
                        "value": "        },500)})",
                        "change_type": "added"
                    },
                    {
                        "value": "    ",
                        "change_type": "added"
                    },
                    {
                        "value": "    myPromise.then(res.status(200).json(books[req.params.isbn]))",
                        "change_type": "added"
                    },
                    {
                        "value": "",
                        "change_type": "added"
                    },
                    {
                        "value": " });",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "  ",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "// Get book details based on author",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "public_users.get('/author/:author',function (req, res) {",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "  //Write your code here",
                        "change_type": "removed"
                    },
                    {
                        "value": "  return res.status(300).json({message: \"Yet to be implemented\"});",
                        "change_type": "removed"
                    },
                    {
                        "value": "",
                        "change_type": "added"
                    },
                    {
                        "value": "    let myPromise = new Promise((resolve,reject) => {",
                        "change_type": "added"
                    },
                    {
                        "value": "        setTimeout(() => {",
                        "change_type": "added"
                    },
                    {
                        "value": "            resolve(Object.entries(books).filter(([isbn, book]) => ",
                        "change_type": "added"
                    },
                    {
                        "value": "                book.author == req.params.author)[0][1])",
                        "change_type": "added"
                    },
                    {
                        "value": "        },500)})",
                        "change_type": "added"
                    },
                    {
                        "value": "    ",
                        "change_type": "added"
                    },
                    {
                        "value": "    myPromise.then(book => res.status(200).json(book))",
                        "change_type": "added"
                    },
                    {
                        "value": "",
                        "change_type": "added"
                    },
                    {
                        "value": "});",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "// Get all books based on title",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "public_users.get('/title/:title',function (req, res) {",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "  //Write your code here",
                        "change_type": "removed"
                    },
                    {
                        "value": "  return res.status(300).json({message: \"Yet to be implemented\"});",
                        "change_type": "removed"
                    },
                    {
                        "value": "    let myPromise = new Promise((resolve,reject) => {",
                        "change_type": "added"
                    },
                    {
                        "value": "        setTimeout(() => {",
                        "change_type": "added"
                    },
                    {
                        "value": "            resolve(Object.entries(books).filter(([isbn, book]) =>",
                        "change_type": "added"
                    },
                    {
                        "value": "                book.title == req.params.title)[0][1])",
                        "change_type": "added"
                    },
                    {
                        "value": "        },500)})",
                        "change_type": "added"
                    },
                    {
                        "value": "",
                        "change_type": "added"
                    },
                    {
                        "value": "        myPromise.then(book => res.status(200).json(book))",
                        "change_type": "added"
                    },
                    {
                        "value": "",
                        "change_type": "added"
                    },
                    {
                        "value": "});",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "//  Get book review",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "public_users.get('/review/:isbn',function (req, res) {",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "  //Write your code here",
                        "change_type": "removed"
                    },
                    {
                        "value": "  return res.status(300).json({message: \"Yet to be implemented\"});",
                        "change_type": "removed"
                    },
                    {
                        "value": "  return res.status(200).json(books[req.params.isbn].reviews);",
                        "change_type": "added"
                    },
                    {
                        "value": "});",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "module.exports.general = public_users;",
                        "change_type": "unchanged"
                    }
                ]
            }
        ]
    },
    {
        "repo": "GIANO",
        "date": "2018-01-05T22:56:25Z",
        "msg": "Ready to GO!",
        "sha": "7430997ccd77a61be6b01329dd1da97b610be53d",
        "files": [
            {
                "filename_after": ".classpath",
                "filename_before": ".classpath",
                "status": "added",
                "content_changes": []
            },
            {
                "filename_after": ".gitignore",
                "filename_before": ".gitignore",
                "status": "added",
                "content_changes": []
            },
            {
                "filename_after": ".project",
                "filename_before": ".project",
                "status": "added",
                "content_changes": []
            },
            {
                "filename_after": "GIANO/src-java/jspectrumanalyzer/HackRFSweepSpectrumAnalyzer.java",
                "filename_before": "GIANO/src-java/jspectrumanalyzer/HackRFSweepSpectrumAnalyzer.java",
                "status": "modified",
                "content_changes": [
                    {
                        "value": "@ -8,12 +8,17 @@",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "import java.awt.Graphics;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "import java.awt.Graphics2D;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "import java.awt.Image;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "import java.awt.Paint;",
                        "change_type": "added"
                    },
                    {
                        "value": "import java.awt.Transparency;",
                        "change_type": "added"
                    },
                    {
                        "value": "import java.awt.event.ActionEvent;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "import java.awt.event.ActionListener;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "import java.awt.event.MouseAdapter;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "import java.awt.event.MouseEvent;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "import java.awt.event.MouseListener;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "import java.awt.event.MouseMotionAdapter;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "import java.awt.event.WindowAdapter;",
                        "change_type": "added"
                    },
                    {
                        "value": "import java.awt.event.WindowEvent;",
                        "change_type": "added"
                    },
                    {
                        "value": "import java.awt.event.WindowListener;",
                        "change_type": "added"
                    },
                    {
                        "value": "import java.awt.geom.Rectangle2D;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "import java.io.File;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "import java.io.IOException;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "@ -71,6 +76,7 @@",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "import jspectrumanalyzer.core.HackRFSweepSettingsUI;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "import jspectrumanalyzer.core.IMain;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "import jspectrumanalyzer.core.PowerCalibration;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "import jspectrumanalyzer.core.PresetErrorFrame;",
                        "change_type": "added"
                    },
                    {
                        "value": "import jspectrumanalyzer.core.SpurFilter;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "import jspectrumanalyzer.core.TextAreaFrame;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "import jspectrumanalyzer.core.WaterfallPlot;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "@ -338,6 +344,20 @@ public void actionPerformed(ActionEvent e) {",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\t\t\tstopHackrfSweep();",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\t\t}",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\t}));",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\t",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t//Aggiorno presets",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\tf.addWindowListener(new WindowAdapter() {",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t@Override",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\tpublic void windowClosing(WindowEvent e) {",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\ttry {",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\tsettingsPanel.getIOPresets().aggiornaFile();",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t} catch (IOException e1) {",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\tnew PresetErrorFrame(2);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t}",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t}",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t});",
                        "change_type": "added"
                    },
                    {
                        "value": "\t}",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\tprivate void addTabbedPane() {",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "@ -375,12 +395,12 @@ public void actionPerformed(ActionEvent arg0) {",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t}",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\tprivate void addChartMouseMarkers() {",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\tValueMarker freqMarker\t= new ValueMarker(0, Color.WHITE, new BasicStroke(1f));",
                        "change_type": "removed"
                    },
                    {
                        "value": "\t\tValueMarker freqMarker\t= new ValueMarker(0, new Color(0,0,0,0), new BasicStroke(1f));",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\tfreqMarker.setLabelPaint(Color.white);",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\tfreqMarker.setLabelAnchor(RectangleAnchor.TOP_RIGHT);",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\tfreqMarker.setLabelTextAnchor(TextAnchor.TOP_LEFT);",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\tfreqMarker.setLabelFont(font);",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\tValueMarker signalMarker\t= new ValueMarker(0, Color.WHITE, new BasicStroke(1f));",
                        "change_type": "removed"
                    },
                    {
                        "value": "\t\tValueMarker signalMarker\t= new ValueMarker(0, new Color(0,0,0,0), new BasicStroke(1f));",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\tsignalMarker.setLabelPaint(Color.white);",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\tsignalMarker.setLabelAnchor(RectangleAnchor.TOP_RIGHT);",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\tsignalMarker.setLabelTextAnchor(TextAnchor.BOTTOM_RIGHT);",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "@ -956,4 +976,5 @@ public void zoom(int wheelRotation) {",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\tsettingsPanel.getFrequencySelectorStart().setValue((int) freqStart);",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\tsettingsPanel.getFrequencySelectorEnd().setValue((int) freqEnd);",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t}",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t",
                        "change_type": "added"
                    },
                    {
                        "value": "}",
                        "change_type": "unchanged"
                    }
                ]
            },
            {
                "filename_after": "GIANO/src-java/jspectrumanalyzer/core/HackRFSweepSettingsUI.java",
                "filename_before": "GIANO/src-java/jspectrumanalyzer/core/HackRFSweepSettingsUI.java",
                "status": "modified",
                "content_changes": [
                    {
                        "value": "@ -17,10 +17,18 @@",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "import java.awt.event.MouseListener;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "import java.beans.PropertyChangeEvent;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "import java.beans.PropertyChangeListener;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "import java.io.File;",
                        "change_type": "added"
                    },
                    {
                        "value": "import java.io.FileInputStream;",
                        "change_type": "added"
                    },
                    {
                        "value": "import java.io.FileNotFoundException;",
                        "change_type": "added"
                    },
                    {
                        "value": "import java.io.FileOutputStream;",
                        "change_type": "added"
                    },
                    {
                        "value": "import java.io.IOException;",
                        "change_type": "added"
                    },
                    {
                        "value": "import java.io.ObjectOutputStream;",
                        "change_type": "added"
                    },
                    {
                        "value": "import java.net.URI;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "import java.text.NumberFormat;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "import java.util.Collection;",
                        "change_type": "added"
                    },
                    {
                        "value": "",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "import javax.swing.BorderFactory;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "import javax.swing.DefaultListModel;",
                        "change_type": "added"
                    },
                    {
                        "value": "import javax.swing.JButton;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "import javax.swing.JCheckBox;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "import javax.swing.JFormattedTextField;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "@ -30,7 +38,9 @@",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "import javax.swing.JMenu;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "import javax.swing.JMenuBar;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "import javax.swing.JMenuItem;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "import javax.swing.JOptionPane;",
                        "change_type": "added"
                    },
                    {
                        "value": "import javax.swing.JPanel;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "import javax.swing.JScrollPane;",
                        "change_type": "added"
                    },
                    {
                        "value": "import javax.swing.JSlider;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "import javax.swing.JSpinner;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "import javax.swing.JTabbedPane;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "@ -46,6 +56,8 @@",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "import javax.swing.event.AncestorListener;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "import javax.swing.event.ChangeEvent;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "import javax.swing.event.ChangeListener;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "import javax.swing.event.ListSelectionEvent;",
                        "change_type": "added"
                    },
                    {
                        "value": "import javax.swing.event.ListSelectionListener;",
                        "change_type": "added"
                    },
                    {
                        "value": "",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "import org.jfree.chart.block.LineBorder;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "@ -83,9 +95,12 @@ public class HackRFSweepSettingsUI extends JPanel",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\tprivate JTextField tresholdTextField;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\tprivate JSpinner tresholdSpinner;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\tprivate IOPresets ioPresets = new IOPresets();",
                        "change_type": "removed"
                    },
                    {
                        "value": "\tprivate IOPresets ioPresets = null;",
                        "change_type": "added"
                    },
                    {
                        "value": "\tprivate JList presetList;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\tprivate JButton newPresetButton, savePresetButton, modifyPresetButton, deletePresetButton, selectPresetButton;",
                        "change_type": "removed"
                    },
                    {
                        "value": "\tprivate JButton newPresetButton, savePresetButton, deletePresetButton, selectPresetButton; /*modifyPresetButton,*/",
                        "change_type": "added"
                    },
                    {
                        "value": "\tprivate String frequencyTitle = \"Default\";",
                        "change_type": "added"
                    },
                    {
                        "value": "\tprivate JLabel lblFrequencyTitle;",
                        "change_type": "added"
                    },
                    {
                        "value": "\tprivate Preset selected;",
                        "change_type": "added"
                    },
                    {
                        "value": "\t",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\tpublic JButton getSearchTreasholdButton() {",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\treturn searchTreasholdButton;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "@ -266,58 +281,299 @@ public HackRFSweepSettingsUI(HackRFSettings hackRFSettings)",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\tpresetsSouthPanel.setBackground(mainColor);",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\tpresetsSouthPanel.setForeground(Color.WHITE);",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\t",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\ttry {",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\tioPresets = new IOPresets();",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t} catch (ClassNotFoundException e1) {",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\tnew PresetErrorFrame(1);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t} catch (FileNotFoundException e2) {",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\tnew PresetErrorFrame(1);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t} catch (IOException e2) {",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\tnew PresetErrorFrame(2);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t}",
                        "change_type": "added"
                    },
                    {
                        "value": "",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\tCollection<String> listPresetsName = null;",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\ttry {",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\tlistPresetsName = ioPresets.getListName();",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t} catch (ClassNotFoundException e1) {",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\tnew PresetErrorFrame(2);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t} catch (FileNotFoundException e1) {",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\tnew PresetErrorFrame(1);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t} catch (IOException e1) {",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\tnew PresetErrorFrame(2);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t}",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\tDefaultListModel<String> presetListModel = new DefaultListModel<String>();",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\tfor(String s : listPresetsName){",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\tpresetListModel.addElement(s);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t}",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\tpresetList = new JList<String>(presetListModel);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\tpresetList.addListSelectionListener(new ListSelectionListener() {",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t@Override",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\tpublic void valueChanged(ListSelectionEvent e) {",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tCollection<Preset> listP = null;",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\ttry {",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\tlistP = ioPresets.getPresets();",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t} catch (ClassNotFoundException e1) {",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\tnew PresetErrorFrame(2);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t} catch (FileNotFoundException e1) {",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\tnew PresetErrorFrame(1);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t} catch (IOException e1) {",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\tnew PresetErrorFrame(2);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t}",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tif(ioPresets.getDefaultPreset().getName().equals((String)presetListModel.getElementAt(presetList.getSelectedIndex()))){",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\tselectPresetButton.setEnabled(true);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\tdeletePresetButton.setEnabled(false);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t}",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\telse{",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\tselectPresetButton.setEnabled(true);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\tdeletePresetButton.setEnabled(true);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t}",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tfor(Preset p : listP){",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\tif(p.getName().equals((String) presetListModel.getElementAt(presetList.getSelectedIndex())))",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t\t\tselected = p;",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t} ",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t}",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t});",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t//Presets Buttons and their relatives ActionListener/Perfromed",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\tnewPresetButton = new JButton(\"NEW\");",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\tnewPresetButton.setBackground(settingColor);",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\tnewPresetButton.setContentAreaFilled(false);",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\tnewPresetButton.setOpaque(true);",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\tnewPresetButton.setBorder((Border) new javax.swing.border.LineBorder(Color.BLACK));",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\tnewPresetButton.addActionListener(new ActionListener(){",
                        "change_type": "added"
                    },
                    {
                        "value": "",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t@Override",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\tpublic void actionPerformed(ActionEvent e) {",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t//UI",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tJFrame insertFrame = new JFrame(\"New Preset\");",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tinsertFrame.setBackground(HackRFSweepSettingsUI.mainColor);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tinsertFrame.setVisible(true);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tinsertFrame.setSize(new Dimension(400,150));",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tinsertFrame.setLocationRelativeTo(null);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tJPanel layoutPanel, centerPanel, bottomPanel;",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tJLabel lblName, lblMinV, lblMaxV, lblMessage;",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tJTextField txtName, txtMinV, txtMaxV;",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tJButton saveButton;",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t//UI",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tlayoutPanel = new JPanel();",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tlayoutPanel.setLayout(new BorderLayout());",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tlayoutPanel.setBackground(HackRFSweepSettingsUI.mainColor);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tcenterPanel = new JPanel();",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tcenterPanel.setLayout(new GridLayout(3,2));",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tcenterPanel.setBackground(HackRFSweepSettingsUI.mainColor);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tbottomPanel = new JPanel();",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tbottomPanel.setLayout(new BorderLayout());",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tbottomPanel.setBackground(HackRFSweepSettingsUI.mainColor);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tlblMessage = new JLabel(\"Insert values and Save\");",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tlblMessage.setForeground(HackRFSweepSettingsUI.mainColor);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tlblMessage.setBackground(Color.BLACK);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tlblName = new JLabel(\"Name\");",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tlblName.setBackground(HackRFSweepSettingsUI.mainColor);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tlblName.setForeground(Color.BLACK);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\ttxtName = new JTextField();",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\ttxtName.setEditable(true);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tlblMinV = new JLabel(\"Freq. Min\");",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tlblMinV.setBackground(HackRFSweepSettingsUI.mainColor);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tlblMinV.setForeground(Color.BLACK);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\ttxtMinV = new JTextField();",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\ttxtMinV.setEditable(true);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tlblMaxV = new JLabel(\"Freq. Max\");",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tlblMaxV.setBackground(HackRFSweepSettingsUI.mainColor);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tlblMaxV.setForeground(Color.BLACK);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\ttxtMaxV = new JTextField();",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\ttxtMaxV.setEditable(true);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tsaveButton = new JButton(\"SAVE\");",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tsaveButton.setBackground(HackRFSweepSettingsUI.settingColor);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tsaveButton.setContentAreaFilled(false);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tsaveButton.setOpaque(true);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tsaveButton.setBorder((Border) new javax.swing.border.LineBorder(Color.BLACK));",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tcenterPanel.add(lblName);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tcenterPanel.add(txtName);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tcenterPanel.add(lblMinV);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tcenterPanel.add(txtMinV);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tcenterPanel.add(lblMaxV);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tcenterPanel.add(txtMaxV);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tbottomPanel.add(saveButton, BorderLayout.CENTER);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tlayoutPanel.add(centerPanel, BorderLayout.CENTER);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tlayoutPanel.add(bottomPanel, BorderLayout.SOUTH);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tinsertFrame.add(layoutPanel);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t//ActionListener\\Performed",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tsaveButton.addActionListener(new ActionListener() {",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t@Override",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\tpublic void actionPerformed(ActionEvent e) {",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t\tString name, sMinV, sMaxV;",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t\tint minV, maxV;",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t\tPreset newP = null;",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t\t",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t\tname = txtName.getText();",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t\tsMinV = txtMinV.getText();",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t\tsMaxV = txtMaxV.getText();",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t\tSystem.out.println(name + sMinV + sMaxV);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t\tminV = Integer.parseInt(sMinV);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t\tmaxV = Integer.parseInt(sMaxV);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t\tSystem.out.println(name + minV + maxV);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t\ttry{",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t\t\tnewP = new Preset(minV, maxV, name);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t\t\tioPresets.add(newP);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t\t\tpresetListModel.addElement(newP.getName());",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t\t}catch(IllegalArgumentException iea){",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t\t\tinsertFrame.setVisible(false);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t\t\tnew PresetErrorFrame(4);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t\t} catch (ClassNotFoundException | IOException e1) {",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t\t\tnew PresetErrorFrame(2);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t\t}",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t\tinsertFrame.setVisible(false);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t}",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t});",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t}\t",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t});",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\tselectPresetButton = new JButton(\"SELECT\");",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\tselectPresetButton.setBackground(settingColor);",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\tselectPresetButton.setContentAreaFilled(false);",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\tselectPresetButton.setOpaque(true);",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\tselectPresetButton.setBorder((Border) new javax.swing.border.LineBorder(Color.BLACK));",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "",
                        "change_type": "removed"
                    },
                    {
                        "value": "\t\tmodifyPresetButton = new JButton(\"MODIFY\");",
                        "change_type": "removed"
                    },
                    {
                        "value": "\t\tmodifyPresetButton.setBackground(settingColor);",
                        "change_type": "removed"
                    },
                    {
                        "value": "\t\tmodifyPresetButton.setContentAreaFilled(false);",
                        "change_type": "removed"
                    },
                    {
                        "value": "\t\tmodifyPresetButton.setOpaque(true);",
                        "change_type": "removed"
                    },
                    {
                        "value": "\t\tmodifyPresetButton.setBorder((Border) new javax.swing.border.LineBorder(Color.BLACK));",
                        "change_type": "removed"
                    },
                    {
                        "value": "\t\tselectPresetButton.setEnabled(false);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\tselectPresetButton.addActionListener(new ActionListener() {",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t@Override",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\tpublic void actionPerformed(ActionEvent e) {",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tfrequencySelectorStart.setValue(selected.getMinValue());",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tfrequencySelectorEnd.setValue(selected.getMaxValue());",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tlblFrequencyTitle.setText(selected.getName());",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t}",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t});",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\tdeletePresetButton = new JButton(\"DELETE\");",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\tdeletePresetButton.setBackground(settingColor);",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\tdeletePresetButton.setContentAreaFilled(false);",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\tdeletePresetButton.setOpaque(true);",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\tdeletePresetButton.setBorder((Border) new javax.swing.border.LineBorder(Color.BLACK));",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\tdeletePresetButton.setEnabled(false);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\tdeletePresetButton.addActionListener(new ActionListener() {",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t@Override",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\tpublic void actionPerformed(ActionEvent e) {",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\ttry {",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\tioPresets.deletePreset(selected);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t} catch (ClassNotFoundException e1) {",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\tnew PresetErrorFrame(2);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t} catch (FileNotFoundException e1) {",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\tnew PresetErrorFrame(1);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t} catch (IOException e1) {",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\tnew PresetErrorFrame(2);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t}",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tpresetListModel.removeElement(presetListModel.getElementAt(presetList.getSelectedIndex()));",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t}",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t});",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\tsavePresetButton = new JButton(\"SAVE\");",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\tsavePresetButton.setBackground(settingColor);",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\tsavePresetButton.setContentAreaFilled(false);",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\tsavePresetButton.setOpaque(true);",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\tsavePresetButton.setBorder((Border) new javax.swing.border.LineBorder(Color.BLACK));",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\t",
                        "change_type": "removed"
                    },
                    {
                        "value": "\t\tString[] presets= ioPresets.getListName();",
                        "change_type": "removed"
                    },
                    {
                        "value": "\t\tpresetList = new JList<String>(presets);",
                        "change_type": "removed"
                    },
                    {
                        "value": "\t\tsavePresetButton.addActionListener(new ActionListener() {",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t@Override",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\tpublic void actionPerformed(ActionEvent e) {",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t//String name = JOptionPane.showInputDialog(\"Name\");",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tJFrame insertFrame = new JFrame(\"Save Preset\");",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tinsertFrame.setBackground(HackRFSweepSettingsUI.mainColor);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tinsertFrame.setVisible(true);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tinsertFrame.setSize(new Dimension(400,150));",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tinsertFrame.setLocationRelativeTo(null);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tJPanel layout = new JPanel();",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tlayout.setBackground(mainColor);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tlayout.setLayout(new BorderLayout());",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tJPanel upper = new JPanel();",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tupper.setBackground(mainColor);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tupper.setLayout(new GridLayout(1, 2));",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tJLabel lblName = new JLabel(\"Name\");",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tlblName.setBackground(HackRFSweepSettingsUI.mainColor);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tlblName.setForeground(Color.BLACK);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tJTextField txtName = new JTextField();",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\ttxtName.setSize(300, 200);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\ttxtName.setEditable(true);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tJButton saveButton = new JButton(\"SAVE\");",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tsaveButton.setBackground(HackRFSweepSettingsUI.settingColor);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tsaveButton.setContentAreaFilled(false);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tsaveButton.setOpaque(true);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tsaveButton.setBorder((Border) new javax.swing.border.LineBorder(Color.BLACK));",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tupper.add(lblName);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tupper.add(txtName);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tlayout.add(upper, BorderLayout.CENTER);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tlayout.add(saveButton, BorderLayout.SOUTH);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tinsertFrame.add(layout);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tsaveButton.addActionListener(new ActionListener() {",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t@Override",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\tpublic void actionPerformed(ActionEvent e) {",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t\tPreset newP = null;",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t\tString name = txtName.getText();",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t\tif(name.isEmpty()){",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t\t\tnew PresetErrorFrame(3);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t\t}",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t\telse{",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t\t\tint minV = frequencySelectorStart.getValue();",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t\t\tint maxV = frequencySelectorEnd.getValue();",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t\t\ttry{",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t\t\t\tnewP = new Preset(minV, maxV, name);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t\t\t\tioPresets.add(newP);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t\t\t\tpresetListModel.addElement(newP.getName());",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t\t\t}catch(IllegalArgumentException iea){",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t\t\t\tinsertFrame.setVisible(false);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t\t\t\tnew PresetErrorFrame(3);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t\t\t} catch (ClassNotFoundException e1) {",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t\t\t\tnew PresetErrorFrame(2);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t\t\t} catch (FileNotFoundException e1) {",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t\t\t\tnew PresetErrorFrame(1);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t\t\t} catch (IOException e1) {",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t\t\t\tnew PresetErrorFrame(2);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t\t\t}",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t\t}",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t\tinsertFrame.setVisible(false);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\t}",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t});",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t}",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t});",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\tpresetsUpperPanel.add(newPresetButton);",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\tpresetsCenterPanel.add(presetList);",
                        "change_type": "removed"
                    },
                    {
                        "value": "\t\tpresetsCenterPanel.add(new JScrollPane(presetList));",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\tpresetsSouthPanel.add(selectPresetButton);",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\tpresetsSouthPanel.add(modifyPresetButton);",
                        "change_type": "removed"
                    },
                    {
                        "value": "\t\tpresetsSouthPanel.add(deletePresetButton);",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\tpresetsLayoutPanel.add(presetsUpperPanel, BorderLayout.NORTH);",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\tpresetsLayoutPanel.add(presetsCenterPanel, BorderLayout.CENTER);",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\tpresetsLayoutPanel.add(presetsSouthPanel, BorderLayout.SOUTH);",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\tpresetsMenu.add(presetsLayoutPanel);",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\t",
                        "change_type": "removed"
                    },
                    {
                        "value": "\t\t",
                        "change_type": "removed"
                    },
                    {
                        "value": "\t\t/*tabbedPane.addTab(\"Frequency\", frequencyLayoutPanel);",
                        "change_type": "removed"
                    },
                    {
                        "value": "\t\ttabbedPane.addTab(\"Sampling\", samplingLayoutPanel);",
                        "change_type": "removed"
                    },
                    {
                        "value": "\t\ttabbedPane.addTab(\"Waterfall\", waterfallLayoutPanel);",
                        "change_type": "removed"
                    },
                    {
                        "value": "\t\ttabbedPane.addTab(\"Peaks\", peaksLayoutPanel);\t",
                        "change_type": "removed"
                    },
                    {
                        "value": "\t\ttabbedPane.setVisible(false);",
                        "change_type": "removed"
                    },
                    {
                        "value": "\t\t/*tabbedPane.setTabComponentAt(tabbedPane.getTabCount() - 1, new JButton(",
                        "change_type": "removed"
                    },
                    {
                        "value": "\t\t        \"+\"));*/",
                        "change_type": "removed"
                    },
                    {
                        "value": "\t\t//add(tabbedPane, BorderLayout.NORTH);",
                        "change_type": "removed"
                    },
                    {
                        "value": "\t\tfrequencyPanel.add(savePresetButton, BorderLayout.SOUTH);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\tfrequencyMenu.add(frequencyLayoutPanel);",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\tsamplingMenu.add(samplingLayoutPanel);",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "@ -335,12 +591,6 @@ public HackRFSweepSettingsUI(HackRFSettings hackRFSettings)",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\tmenuBar.add(presetsMenu);",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\tadd(menuBar, BorderLayout.LINE_START);",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\t",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\t/*tabbedPane.setBackgroundAt(0, mainColor);",
                        "change_type": "removed"
                    },
                    {
                        "value": "\t\ttabbedPane.setBackgroundAt(1, mainColor);",
                        "change_type": "removed"
                    },
                    {
                        "value": "\t\ttabbedPane.setBackgroundAt(2, mainColor);",
                        "change_type": "removed"
                    },
                    {
                        "value": "\t\ttabbedPane.setBackgroundAt(3, mainColor);",
                        "change_type": "removed"
                    },
                    {
                        "value": "\t\tfrequencyLayoutPanel.getParent().setBackground(mainColor);*/",
                        "change_type": "removed"
                    },
                    {
                        "value": "\t\t",
                        "change_type": "removed"
                    },
                    {
                        "value": "\t\tcenterPanel = new JPanel();",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\tcenterPanel.setBackground(mainColor);",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\tcenterLayoutPanel.add(centerPanel,BorderLayout.LINE_START);",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "@ -355,8 +605,7 @@ public HackRFSweepSettingsUI(HackRFSettings hackRFSettings)",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\t",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\t//setLayout(new MigLayout(\"\", \"[123.00px,grow,leading]\", \"[][20px][][][20px][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]\"));",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\tString frequencyTitle = \"Default\";",
                        "change_type": "removed"
                    },
                    {
                        "value": "\t\tJLabel lblFrequencyTitle = new JLabel(\"\\t\"+frequencyTitle+\"\\t\");\t",
                        "change_type": "removed"
                    },
                    {
                        "value": "\t\tlblFrequencyTitle = new JLabel(\"\\t\"+frequencyTitle+\"\\t\");\t",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\tlblFrequencyTitle.setForeground(Color.WHITE);",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\tfrequencyTitlePanel.add(lblFrequencyTitle, BorderLayout.CENTER);",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\t",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "@ -642,5 +891,9 @@ public FrequencySelectorPanel getFrequencySelectorStart() {",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\tpublic FrequencySelectorPanel getFrequencySelectorEnd() {",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\treturn frequencySelectorEnd;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t}",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t",
                        "change_type": "added"
                    },
                    {
                        "value": "\tpublic IOPresets getIOPresets(){",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\treturn ioPresets;",
                        "change_type": "added"
                    },
                    {
                        "value": "\t}",
                        "change_type": "added"
                    },
                    {
                        "value": "",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "}",
                        "change_type": "unchanged"
                    }
                ]
            },
            {
                "filename_after": "GIANO/src-java/jspectrumanalyzer/core/IOPresetInitException.java",
                "filename_before": "GIANO/src-java/jspectrumanalyzer/core/IOPresetInitException.java",
                "status": "added",
                "content_changes": []
            },
            {
                "filename_after": "GIANO/src-java/jspectrumanalyzer/core/IOPresets.java",
                "filename_before": "GIANO/src-java/jspectrumanalyzer/core/IOPresets.java",
                "status": "added",
                "content_changes": []
            },
            {
                "filename_after": "GIANO/src-java/jspectrumanalyzer/core/ModifyPresetUI.java",
                "filename_before": "GIANO/src-java/jspectrumanalyzer/core/ModifyPresetUI.java",
                "status": "added",
                "content_changes": []
            },
            {
                "filename_after": "GIANO/src-java/jspectrumanalyzer/core/NewPresetUI.java",
                "filename_before": "GIANO/src-java/jspectrumanalyzer/core/NewPresetUI.java",
                "status": "added",
                "content_changes": []
            },
            {
                "filename_after": "GIANO/src-java/jspectrumanalyzer/core/Preset.java",
                "filename_before": "GIANO/src-java/jspectrumanalyzer/core/Preset.java",
                "status": "added",
                "content_changes": []
            },
            {
                "filename_after": "GIANO/src-java/jspectrumanalyzer/core/PresetErrorFrame.java",
                "filename_before": "GIANO/src-java/jspectrumanalyzer/core/PresetErrorFrame.java",
                "status": "added",
                "content_changes": []
            },
            {
                "filename_after": "GIANO/src-java/jspectrumanalyzer/core/TextAreaFrame.java",
                "filename_before": "GIANO/src-java/jspectrumanalyzer/core/TextAreaFrame.java",
                "status": "modified",
                "content_changes": [
                    {
                        "value": "@ -8,6 +8,8 @@",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "import javax.swing.JFrame;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "import javax.swing.JTextArea;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "import java.awt.BorderLayout;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "import java.awt.Color;",
                        "change_type": "added"
                    },
                    {
                        "value": "",
                        "change_type": "added"
                    },
                    {
                        "value": "import javax.swing.JLabel;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "import javax.swing.JScrollPane;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "@ -60,6 +62,8 @@ private void initialize() {",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\t",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\t",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\ttextArea = new JTextArea();",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\ttextArea.setBackground(HackRFSweepSettingsUI.mainColor);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\ttextArea.setForeground(Color.WHITE);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\ttextArea.setEditable(false);",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\tframe.getContentPane().add(textArea, BorderLayout.CENTER);",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\t",
                        "change_type": "unchanged"
                    }
                ]
            },
            {
                "filename_after": "GIANO/src-java/jspectrumanalyzer/core/ZoomChartPanel.java",
                "filename_before": "GIANO/src-java/jspectrumanalyzer/core/ZoomChartPanel.java",
                "status": "modified",
                "content_changes": [
                    {
                        "value": "@ -41,6 +41,8 @@ public class ZoomChartPanel extends ChartPanel{",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\t\t\t\t\trangeMarker = null;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\tprivate IMain main;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\tprivate boolean dragged = false;",
                        "change_type": "added"
                    },
                    {
                        "value": "\t",
                        "change_type": "added"
                    },
                    {
                        "value": "\tprivate static final String emptyLabel = \"(-; -)\";",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\tpublic ZoomChartPanel(JFreeChart chart, IMain main) {",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "@ -92,7 +94,10 @@ public void mouseReleased(MouseEvent e) {",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\t\t\t",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\t\t\tRectangle2D subplotArea = getChartRenderingInfo().getPlotInfo().getDataArea();",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\t\t\tfreqEnd = plot.getDomainAxis().java2DToValue(x, subplotArea, plot.getDomainAxisEdge());",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\t\t\tmain.updateFrequency(freqStart, freqEnd);",
                        "change_type": "removed"
                    },
                    {
                        "value": "\t\t\t\tif(dragged) {",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\tmain.updateFrequency(freqStart, freqEnd);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t\tdragged = false;",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\t}",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tzoomLabel.setVisible(false);",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\t\t\t",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\t\t\tplot.clearDomainMarkers();",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "@ -132,9 +137,10 @@ public void mousePressed(MouseEvent e) {",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\t});",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\t",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\taddMouseMotionListener(new MouseMotionAdapter() {",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\t\t",
                        "change_type": "removed"
                    },
                    {
                        "value": "",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t@Override",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\t\tpublic void mouseDragged(MouseEvent e) {",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\t\t\tdragged = true;",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\t\t\tXYPlot plot = getChart().getXYPlot();",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\t\t\tdouble x = e.getX();\t",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\t\t\tRectangle2D subplotArea = getChartRenderingInfo().getPlotInfo().getDataArea();",
                        "change_type": "unchanged"
                    }
                ]
            },
            {
                "filename_after": "GIANO/src-java/jspectrumanalyzer/nativebridge/HackRFSweepNativeBridge.java",
                "filename_before": "GIANO/src-java/jspectrumanalyzer/nativebridge/HackRFSweepNativeBridge.java",
                "status": "modified",
                "content_changes": [
                    {
                        "value": "@ -12,7 +12,7 @@",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "public class HackRFSweepNativeBridge",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "{",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\tpublic static final String\t\t\tJNA_LIBRARY_NAME\t= \"hackrf-sweep\";",
                        "change_type": "removed"
                    },
                    {
                        "value": "\tpublic static final String\t\t\tJNA_LIBRARY_NAME\t= \"hackrf-sweep\"; ",
                        "change_type": "added"
                    },
                    {
                        "value": "\tpublic static final NativeLibrary\tJNA_NATIVE_LIB;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\tstatic",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t{",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "@ -21,6 +21,7 @@ public class HackRFSweepNativeBridge",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\t * jnidispatch.dll is used directly instead of JNA bundled jar, because it is much faster to load",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\t */",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\tString pathPrefix\t= \"./\"+Platform.RESOURCE_PREFIX+\"/\";",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "\t\tSystem.out.println(pathPrefix);",
                        "change_type": "added"
                    },
                    {
                        "value": "\t\tSystem.setProperty(\"jna.boot.library.path\", pathPrefix);",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "//\t\tNative.DEBUG_JNA_LOAD\t= true;",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "//\t\tNative.DEBUG_LOAD\t= true;",
                        "change_type": "unchanged"
                    }
                ]
            },
            {
                "filename_after": "SavedPreset",
                "filename_before": "SavedPreset",
                "status": "added",
                "content_changes": []
            },
            {
                "filename_after": "SfondoGiano.JPG",
                "filename_before": "SfondoGiano.JPG",
                "status": "added",
                "content_changes": []
            }
        ]
    },
    {
        "repo": "home-dashboard",
        "date": "2025-06-24T10:40:38Z",
        "msg": "Fix for deploy script to avoid it to end after npm install",
        "sha": "d44693d5135145ac24be5740bb18346b65f5cdc7",
        "files": [
            {
                "filename_after": "deploy-prod.bat",
                "filename_before": "deploy-prod.bat",
                "status": "modified",
                "content_changes": [
                    {
                        "value": "@ -7,12 +7,12 @@ ECHO [1/4] Pull da GitLab...",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "git pull",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "ECHO [2/4] Installazione dipendenze...",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "npm install",
                        "change_type": "removed"
                    },
                    {
                        "value": "call npm install",
                        "change_type": "added"
                    },
                    {
                        "value": "",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "ECHO [3/4] Build progetto...",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "npm run build",
                        "change_type": "removed"
                    },
                    {
                        "value": "call npm run build",
                        "change_type": "added"
                    },
                    {
                        "value": "",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "ECHO [4/4] Avvio server in modalit\u00e0 produzione...",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "npm start",
                        "change_type": "removed"
                    },
                    {
                        "value": "call npm run start",
                        "change_type": "added"
                    },
                    {
                        "value": "",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "ENDLOCAL",
                        "change_type": "unchanged"
                    }
                ]
            }
        ]
    },
    {
        "repo": "python_subinterpreters_benchmarking",
        "date": "2024-07-17T15:37:30Z",
        "msg": "First commit",
        "sha": "36f24e70f5c16b0c1fc54bf85475d9f2cabb6eba",
        "files": [
            {
                "filename_after": "main.py",
                "filename_before": "main.py",
                "status": "added",
                "content_changes": []
            }
        ]
    },
    {
        "repo": "Tamadesktop",
        "date": "2025-06-06T09:57:23Z",
        "msg": "Added focus mode",
        "sha": "22280f0421afdc2b107c1a060e327192dc9c488f",
        "files": [
            {
                "filename_after": "Tamagochi.py",
                "filename_before": "Tamagochi.py",
                "status": "modified",
                "content_changes": [
                    {
                        "value": "@ -11,6 +11,7 @@ def __init__(self, name):",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "        self._discipline = 50",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "        self._sick = False",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "        self._needs_toilet = False",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "        self._focus_mode = False",
                        "change_type": "added"
                    },
                    {
                        "value": "",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "    @property",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "    def name(self):",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "@ -60,6 +61,19 @@ def sick(self):",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "    def needs_toilet(self):",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "        return self._needs_toilet",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "    @property",
                        "change_type": "added"
                    },
                    {
                        "value": "    def focus_mode(self):",
                        "change_type": "added"
                    },
                    {
                        "value": "        return self._focus_mode",
                        "change_type": "added"
                    },
                    {
                        "value": "",
                        "change_type": "added"
                    },
                    {
                        "value": "    def enable_focus_mode(self):",
                        "change_type": "added"
                    },
                    {
                        "value": "        self._focus_mode = True",
                        "change_type": "added"
                    },
                    {
                        "value": "",
                        "change_type": "added"
                    },
                    {
                        "value": "    def disable_focus_mode(self):",
                        "change_type": "added"
                    },
                    {
                        "value": "        self._focus_mode = False",
                        "change_type": "added"
                    },
                    {
                        "value": "",
                        "change_type": "added"
                    },
                    {
                        "value": "    def toggle_focus_mode(self):",
                        "change_type": "added"
                    },
                    {
                        "value": "        self._focus_mode = not self._focus_mode",
                        "change_type": "added"
                    },
                    {
                        "value": "",
                        "change_type": "added"
                    },
                    {
                        "value": "    # Main actions",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "    def feed(self, food_type=\"meal\"):",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "        if food_type == \"meal\":",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "@ -117,10 +131,20 @@ def scold(self):",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "    # Time simulation",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "    def tick(self):",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "        self._hunger = min(100, self._hunger + 2)",
                        "change_type": "removed"
                    },
                    {
                        "value": "        self._energy = max(0, self._energy - 1)",
                        "change_type": "removed"
                    },
                    {
                        "value": "        self._hygiene = max(0, self._hygiene - 1)",
                        "change_type": "removed"
                    },
                    {
                        "value": "        self._happiness = max(0, self._happiness - 1)",
                        "change_type": "removed"
                    },
                    {
                        "value": "        if self._focus_mode:",
                        "change_type": "added"
                    },
                    {
                        "value": "            self._discipline = min(100, self._discipline + 4)",
                        "change_type": "added"
                    },
                    {
                        "value": "            self._hunger = min(100, self._hunger + 4)",
                        "change_type": "added"
                    },
                    {
                        "value": "            self._happiness = min(100, self._happiness + 4)",
                        "change_type": "added"
                    },
                    {
                        "value": "            self._energy = max(0, self._energy - 4)",
                        "change_type": "added"
                    },
                    {
                        "value": "            self._hygiene = max(0, self._hygiene - 1)",
                        "change_type": "added"
                    },
                    {
                        "value": "            self._health = min(100, self._health)",
                        "change_type": "added"
                    },
                    {
                        "value": "            self._age += 0",
                        "change_type": "added"
                    },
                    {
                        "value": "            self._weight = min(100, max(0, self._weight))",
                        "change_type": "added"
                    },
                    {
                        "value": "        else:",
                        "change_type": "added"
                    },
                    {
                        "value": "            self._hunger = min(100, self._hunger + 2)",
                        "change_type": "added"
                    },
                    {
                        "value": "            self._energy = max(0, self._energy - 1)",
                        "change_type": "added"
                    },
                    {
                        "value": "            self._hygiene = max(0, self._hygiene - 1)",
                        "change_type": "added"
                    },
                    {
                        "value": "            self._happiness = max(0, self._happiness - 1)",
                        "change_type": "added"
                    },
                    {
                        "value": "        if self._hunger > 80 or self._hygiene < 20:",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "            self._health = max(0, self._health - 2)",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "        if self._health < 40:",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "@ -156,5 +180,6 @@ def status(self):",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "            \"weight\": self._weight,",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "            \"discipline\": self._discipline,",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "            \"sick\": self._sick,",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "            \"needs_toilet\": self._needs_toilet",
                        "change_type": "removed"
                    },
                    {
                        "value": "        }",
                        "change_type": "removed"
                    },
                    {
                        "value": " No newline at end of file",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "            \"needs_toilet\": self._needs_toilet,",
                        "change_type": "added"
                    },
                    {
                        "value": "            \"focus_mode\": self._focus_mode",
                        "change_type": "added"
                    },
                    {
                        "value": "        }",
                        "change_type": "added"
                    }
                ]
            },
            {
                "filename_after": "renderer.py",
                "filename_before": "renderer.py",
                "status": "modified",
                "content_changes": [
                    {
                        "value": "@ -55,7 +55,8 @@ def desaturate_pixmap(self, pixmap):",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "    def init_status_labels(self):",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "        fields = [",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "            \"age\",",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "            \"sick\", \"needs_toilet\"",
                        "change_type": "removed"
                    },
                    {
                        "value": "            \"sick\", \"needs_toilet\",",
                        "change_type": "added"
                    },
                    {
                        "value": "            \"focus_mode\"  # aggiungi questa riga",
                        "change_type": "added"
                    },
                    {
                        "value": "        ]",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "        y_offset = 0",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "        for field in fields:",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "@ -77,7 +78,10 @@ def update_status(self):",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "        status = self.tamagotchi.status()",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "        for field, label in self.status_labels.items():",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "            value = status[field]",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "            label.setText(f\"{field.capitalize()}: {value}\")",
                        "change_type": "removed"
                    },
                    {
                        "value": "            if field == \"focus_mode\":",
                        "change_type": "added"
                    },
                    {
                        "value": "                label.setText(f\"Focus mode: {'ON' if value else 'OFF'}\")",
                        "change_type": "added"
                    },
                    {
                        "value": "            else:",
                        "change_type": "added"
                    },
                    {
                        "value": "                label.setText(f\"{field.capitalize()}: {value}\")",
                        "change_type": "added"
                    },
                    {
                        "value": "        QtCore.QTimer.singleShot(500, self.update_status)",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "    def paintEvent(self, event):",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "@ -164,7 +168,8 @@ def mouseMoveEvent(self, event):",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "                    \"\ud83d\udca4\": \"Fai dormire\",",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "                    \"\ud83e\uddfc\": \"Pulisci\",",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "                    \"\ud83d\udc8a\": \"Cura\",",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "                    \"\ud83d\ude20\": \"Sgrida\"",
                        "change_type": "removed"
                    },
                    {
                        "value": "                    \"\ud83d\ude20\": \"Sgrida\",",
                        "change_type": "added"
                    },
                    {
                        "value": "                    \"\ud83c\udfaf\": \"Attiva/disattiva Focus Mode\"",
                        "change_type": "added"
                    },
                    {
                        "value": "                }",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "                for btn in self.buttons:",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "                    if btn.contains(event.pos()):",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "@ -179,6 +184,7 @@ def mouseMoveEvent(self, event):",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "                    QtWidgets.QToolTip.hideText()",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "            else:",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "                QtWidgets.QToolTip.hideText()",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "",
                        "change_type": "added"
                    },
                    {
                        "value": "    def mouseReleaseEvent(self, event):",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "        pass",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "@ -197,7 +203,8 @@ def show_buttons(self):",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "            (\"\ud83d\udca4\", self.tamagotchi.sleep),",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "            (\"\ud83e\uddfc\", self.tamagotchi.clean),",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "            (\"\ud83d\udc8a\", self.tamagotchi.heal),",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "            (\"\ud83d\ude20\", self.tamagotchi.scold)",
                        "change_type": "removed"
                    },
                    {
                        "value": "            (\"\ud83d\ude20\", self.tamagotchi.scold),",
                        "change_type": "added"
                    },
                    {
                        "value": "            (\"\ud83c\udfaf\", self.toggle_focus_mode)  # Focus mode button",
                        "change_type": "added"
                    },
                    {
                        "value": "        ]",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "        buttons_per_row = 4",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "        spacing_x = 50",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "@ -230,6 +237,10 @@ def feed_and_update(self, food_type):",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "        self.tamagotchi.feed(food_type)",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "        self.update()",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "    def toggle_focus_mode(self):",
                        "change_type": "added"
                    },
                    {
                        "value": "        self.tamagotchi.toggle_focus_mode()",
                        "change_type": "added"
                    },
                    {
                        "value": "        self.update()",
                        "change_type": "added"
                    },
                    {
                        "value": "",
                        "change_type": "added"
                    },
                    {
                        "value": "    def get_tama_pos(self):",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "        return self._tama_pos",
                        "change_type": "unchanged"
                    },
                    {
                        "value": "",
                        "change_type": "unchanged"
                    }
                ]
            }
        ]
    },
    {
        "repo": "MillGates",
        "date": "2018-06-05T20:30:22Z",
        "msg": "Added more detailed info about petcu holban",
        "sha": "4bc8352cdaaf41b9c53dffbab40cd7d3a2fbf268",
        "files": [
            {
                "filename_after": "Presentation/MillGates.pptx",
                "filename_before": "Presentation/MillGates.pptx",
                "status": "modified",
                "content_changes": []
            },
            {
                "filename_after": "Presentation/blockedpawns.png",
                "filename_before": "Presentation/blockedpawns.png",
                "status": "added",
                "content_changes": []
            },
            {
                "filename_after": "Presentation/doublemorrises.png",
                "filename_before": "Presentation/doublemorrises.png",
                "status": "added",
                "content_changes": []
            },
            {
                "filename_after": "Presentation/heuristictemplate.png",
                "filename_before": "Presentation/heuristictemplate.png",
                "status": "added",
                "content_changes": []
            },
            {
                "filename_after": "Presentation/openedmorrises.png",
                "filename_before": "Presentation/openedmorrises.png",
                "status": "added",
                "content_changes": []
            },
            {
                "filename_after": "Presentation/potentialdoublemorrises.png",
                "filename_before": "Presentation/potentialdoublemorrises.png",
                "status": "added",
                "content_changes": []
            },
            {
                "filename_after": "Presentation/potentialsinglemorrises.png",
                "filename_before": "Presentation/potentialsinglemorrises.png",
                "status": "added",
                "content_changes": []
            },
            {
                "filename_after": "Presentation/state.png",
                "filename_before": "Presentation/state.png",
                "status": "added",
                "content_changes": []
            },
            {
                "filename_after": "Presentation/state1.png",
                "filename_before": "Presentation/state1.png",
                "status": "added",
                "content_changes": []
            },
            {
                "filename_after": "Presentation/state2.png",
                "filename_before": "Presentation/state2.png",
                "status": "added",
                "content_changes": []
            },
            {
                "filename_after": "Presentation/state2dvar12.png",
                "filename_before": "Presentation/state2dvar12.png",
                "status": "added",
                "content_changes": []
            },
            {
                "filename_after": "Presentation/state2dvar6.png",
                "filename_before": "Presentation/state2dvar6.png",
                "status": "added",
                "content_changes": []
            },
            {
                "filename_after": "Presentation/state2dvar9a.png",
                "filename_before": "Presentation/state2dvar9a.png",
                "status": "added",
                "content_changes": []
            },
            {
                "filename_after": "Presentation/state2dvar9b.png",
                "filename_before": "Presentation/state2dvar9b.png",
                "status": "added",
                "content_changes": []
            },
            {
                "filename_after": "Presentation/state3.png",
                "filename_before": "Presentation/state3.png",
                "status": "added",
                "content_changes": []
            },
            {
                "filename_after": "Presentation/state3var12.png",
                "filename_before": "Presentation/state3var12.png",
                "status": "added",
                "content_changes": []
            },
            {
                "filename_after": "Presentation/state3var9b.png",
                "filename_before": "Presentation/state3var9b.png",
                "status": "added",
                "content_changes": []
            }
        ]
    }
]